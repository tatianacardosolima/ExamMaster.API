// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockExam.Manage.Database.Write.Context;

#nullable disable

namespace MockExam.Manage.Database.Write.Migrations
{
    [DbContext(typeof(MockExamContext))]
    partial class MockExamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MockExam.Manage.Domain.Answers.Entities.AnswerOptionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOption", (string)null);
                });

            modelBuilder.Entity("MockExam.Manage.Domain.Mocks.Entities.MockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Mock", (string)null);
                });

            modelBuilder.Entity("MockExam.Manage.Domain.Questions.Entities.QuestionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MockId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.HasKey("Id");

                    b.HasIndex("MockId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("MockExam.Manage.Domain.Answers.Entities.AnswerOptionEntity", b =>
                {
                    b.HasOne("MockExam.Manage.Domain.Questions.Entities.QuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MockExam.Manage.Domain.Mocks.Entities.MockEntity", b =>
                {
                    b.OwnsOne("Common.Shared.ValueObjects.EffectivePeriodValueObject", "EffectivePeriod", b1 =>
                        {
                            b1.Property<Guid>("MockEntityId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("StartDate");

                            b1.HasKey("MockEntityId");

                            b1.ToTable("Mock");

                            b1.WithOwner()
                                .HasForeignKey("MockEntityId");
                        });

                    b.Navigation("EffectivePeriod")
                        .IsRequired();
                });

            modelBuilder.Entity("MockExam.Manage.Domain.Questions.Entities.QuestionEntity", b =>
                {
                    b.HasOne("MockExam.Manage.Domain.Mocks.Entities.MockEntity", "Mock")
                        .WithMany("Questions")
                        .HasForeignKey("MockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mock");
                });

            modelBuilder.Entity("MockExam.Manage.Domain.Mocks.Entities.MockEntity", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MockExam.Manage.Domain.Questions.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
